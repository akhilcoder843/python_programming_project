# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load the dataset (you can replace 'car_mileage.csv' with your dataset)
# You can use a dataset like the 'auto-mpg' dataset from UCI or any similar dataset.
df = pd.read_csv('car_mileage.csv')

# Step 3: Exploratory Data Analysis (EDA)
# Display first few rows of the dataset
print(df.head())

# Summary statistics
print(df.describe())

# Check for missing values
print(df.isnull().sum())

# Visualize relationships between features and the target (mpg)
sns.pairplot(df)
plt.show()

# Step 4: Data Preprocessing
# Drop rows with missing values (alternatively, you can fill missing values with mean or median)
df = df.dropna()

# Convert categorical data (if any) to numeric using One-Hot Encoding (for example, 'origin' column)
df = pd.get_dummies(df, drop_first=True)

# Step 5: Define Features (X) and Target (y)
X = df.drop(['mpg'], axis=1)  # Drop the target column
y = df['mpg']  # Target column (mileage)

# Step 6: Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Initialize the Linear Regression model
model = LinearRegression()

# Step 8: Train the model
model.fit(X_train, y_train)

# Step 9: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 10: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Step 11: Visualize the results
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Mileage (mpg)")
plt.ylabel("Predicted Mileage (mpg)")
plt.title("Actual vs Predicted Mileage")
plt.show()

# Optional: Print the model coefficients
print("Model Coefficients:")
for col, coef in zip(X.columns, model.coef_):
    print(f"{col}: {coef}")
